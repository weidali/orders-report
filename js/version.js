#!/usr/bin/env node

import { readFileSync, writeFileSync } from 'fs';
import { fileURLToPath } from 'url';
import path from 'path';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const args = process.argv.slice(2);
const command = args[0] || 'help';

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const VERSION_FILE = path.join(__dirname, '../version.json');
const HTML_FILE = path.join(__dirname, '../index.html');
const PACKAGE_FILE = path.join(__dirname, '../package.json');

function showHelp() {
    console.log(`
üéØ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ Trading Tracker

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run version:[command]

–ö–æ–º–∞–Ω–¥—ã:
  version:patch    - –£–≤–µ–ª–∏—á–∏—Ç—å patch –≤–µ—Ä—Å–∏—é (0.1.0 ‚Üí 0.1.1)
  version:minor    - –£–≤–µ–ª–∏—á–∏—Ç—å minor –≤–µ—Ä—Å–∏—é (0.1.0 ‚Üí 0.2.0)  
  version:major    - –£–≤–µ–ª–∏—á–∏—Ç—å major –≤–µ—Ä—Å–∏—é (0.1.0 ‚Üí 1.0.0)
  version:set      - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é (npm run version:set 1.2.3)
  version:show     - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
  version:help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  npm run version:patch
  npm run version:minor
  npm run version:set 2.0.0
  npm run version:show

–§–∞–π–ª—ã:
  version.json    - –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
  index.html      - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–µ—Ä—Å–∏—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
  package.json    - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
`);
}

function readVersion() {
    try {
        return JSON.parse(readFileSync(VERSION_FILE, 'utf8'));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è version.json:', error.message);
        process.exit(1);
    }
}

function writeVersion(versionData) {
    try {
        writeFileSync(VERSION_FILE, JSON.stringify(versionData, null, 2));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ version.json:', error.message);
        process.exit(1);
    }
}

function updateHtmlVersion(newVersion) {
    try {
        let html = readFileSync(HTML_FILE, 'utf8');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ HTML
        const versionRegex = /<span id="app-version">v(\d+\.\d+\.\d+)<\/span>/;
        if (versionRegex.test(html)) {
            html = html.replace(versionRegex, `<span id="app-version">v${newVersion}</span>`);
        } else {
            console.log('‚ö†Ô∏è  –≠–ª–µ–º–µ–Ω—Ç –≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML, –¥–æ–±–∞–≤–ª—è–µ–º...');
            html = html.replace(
                /<footer>[\s\S]*?<\/footer>/,
                `<footer>
                    <p class="footer-description">
                        –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —É—á—ë—Ç–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π | 
                        <span id="app-version">v${newVersion}</span> 
                        –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    </p>
                </footer>`
            );
        }
        
        writeFileSync(HTML_FILE, html);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML:', error.message);
        process.exit(1);
    }
}

function updatePackageVersion(newVersion) {
    try {
        const packageData = JSON.parse(readFileSync(PACKAGE_FILE, 'utf8'));
        packageData.version = newVersion;
        writeFileSync(PACKAGE_FILE, JSON.stringify(packageData, null, 2));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è package.json:', error.message);
    }
}

function incrementVersion(type, specificVersion = null) {
    const versionData = readVersion();
    let [major, minor, patch] = versionData.version.split('.').map(Number);
    
    let newVersion;
    
    if (specificVersion) {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        if (!/^\d+\.\d+\.\d+$/.test(specificVersion)) {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: major.minor.patch');
            process.exit(1);
        }
        newVersion = specificVersion;
    } else {
        // –ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
        switch (type) {
            case 'major':
                major++;
                minor = 0;
                patch = 0;
                break;
            case 'minor':
                minor++;
                patch = 0;
                break;
            case 'patch':
                patch++;
                break;
            default:
                console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–µ—Ä—Å–∏–∏');
                showHelp();
                process.exit(1);
        }
        newVersion = `${major}.${minor}.${patch}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    versionData.version = newVersion;
    versionData.buildDate = new Date().toISOString();
    versionData.lastUpdated = new Date().toLocaleString('ru-RU');
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    writeVersion(versionData);
    updateHtmlVersion(newVersion);
    updatePackageVersion(newVersion);
    
    console.log(`‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: v${newVersion}`);
    console.log(`üìÖ –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: ${new Date().toLocaleString('ru-RU')}`);
    
    return newVersion;
}

function showCurrentVersion() {
    const versionData = readVersion();
    console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏:');
    console.log(`   –í–µ—Ä—Å–∏—è:       v${versionData.version}`);
    console.log(`   –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏:  ${new Date(versionData.buildDate).toLocaleString('ru-RU')}`);
    if (versionData.lastUpdated) {
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${versionData.lastUpdated}`);
    }
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ:     ${versionData.description}`);
    console.log('');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
switch (command) {
    case 'patch':
    case 'minor':
    case 'major':
        incrementVersion(command);
        break;
        
    case 'set':
        const version = args[1];
        if (!version) {
            console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é: npm run version:set 1.2.3');
            process.exit(1);
        }
        incrementVersion('set', version);
        break;
        
    case 'show':
        showCurrentVersion();
        break;
        
    case 'help':
    default:
        showHelp();
        break;
}